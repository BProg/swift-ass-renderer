@Tutorial(time: 5) {
    @Intro(title: "VideoPlayer Integration") {
        Learn how to easily integrate `SwiftAssRenderer` with SwiftUI's `VideoPlayer`.
    }

    @Section(title: "VideoPlayer") {
        @ContentAndMedia {
            In this section we will create a basic video player using `VideoPlayer` from `SwiftUI`, and we will add the subtitles as an overlay on top of the player. We will also learn how we can periodically update the subtitles by attaching the `AVPlayer` to subtitles view.

            @Image(source: "logo-rounded.png", alt: "Logo image")
        }

        @Steps {
            @Step {
                Let's start by creating a new view and naming it `VideoPlayerView`. We also need to import `SwiftUI`, `AVKit` and `SwiftAssRenderer`.

                @Code(name: "VideoPlayer.swift", file: "videoplayer-1.swift")
            }

            @Step {
                We will need an instance of `AVPlayer`. Let's create one by providing either a local or remove URL. This `AVPlayer` will also be used to observe the time offset and periodically update the subtitles. 

                @Code(name: "VideoPlayer.swift", file: "videoplayer-2.swift")
            }

            @Step {
                Now let's create our renderer. We need to at least specify the URL path where the fonts are located that will be used to render the subtitles.

                @Code(name: "VideoPlayer.swift", file: "videoplayer-3.swift")
            }

            @Step {
                Next, let's create our player view by adding a `VideoPlayer` to the view hierarchy and use the `player` instance for playback.

                @Code(name: "VideoPlayer.swift", file: "videoplayer-4.swift")
            }

            @Step {
                To add the subtitles on top of the player, let's provide an overlay for `VideoPlayer`, we can use the provided `AssSubtitles` view from `SwiftAssRenderer`, which takes the `AssSubtitlesRenderer` as a parameter.

                @Code(name: "VideoPlayer.swift", file: "videoplayer-5.swift")
            }

            @Step {
                In order for the subtitles view to automatically resize itself based on current video aspect ratio, and for the subtitles to be updated periodically, we need to attach the `player` to the `AssSubtitles` view, also providing the update interval at which the subtitles will be rendered. Here we will update our subtitles 10 times per second.

                @Code(name: "VideoPlayer.swift", file: "videoplayer-6.swift")
            }

            @Step {
                Let's make sure the playback will start as soon as the view appears on the screen.

                @Code(name: "VideoPlayer.swift", file: "videoplayer-7.swift")
            }

            @Step {
                Next, we need to load our subtitles contents when view appears, either from disk or remote.

                @Code(name: "VideoPlayer.swift", file: "videoplayer-8.swift")
            }

            @Step {
                After contents have been loaded, we need to provide the contents for the renderer by calling `loadTrack(contents:)`.

                @Code(name: "VideoPlayer.swift", file: "videoplayer-9.swift")
            }

            @Step {
                Finally, let's run the app. And as expected, we can see the video playing and the subtitles being updated.

                @Image(source: "videoplayer.gif", alt: "Green video rectangle with a text  at the bottom that says \"Wow!\"")
            }
        }
    }
}
