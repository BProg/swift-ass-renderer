@Tutorial(time: 5) {
    @Intro(title: "Composition Integration") {
        Learn how to easily integrate `SwiftAssRenderer` with `AVPlayerItem` by burning the subtitles in the video on the fly.
    }

    @Section(title: "Composition") {
        @ContentAndMedia {
            In this section we will create a basic video player using `VideoPlayer` from `SwiftUI`, and we will add the subtitles into the video by burning them on the fly.

            @Image(source: "logo-rounded.png", alt: "Logo image")
        }

        @Steps {
            @Step {
                Let's start by creating a new view and naming it `VideoPlayerView`. We also need to import `SwiftUI`, `AVKit` and `SwiftAssRenderer`.

                @Code(name: "Composition.swift", file: "composition-1.swift")
            }

            @Step {
                We will need an instance of `AVURLAsset`, `AVPlayerItem` and `AVPlayer`. Let's create an asset by providing either a local or remove URL (for a non-HLS stream). Player item can be created using the asset and player can be created using the player item.

                @Code(name: "Composition.swift", file: "composition-2.swift")
            }

            @Step {
                Now let's create our renderer. We need to at least specify the URL path where the fonts are located that will be used to render the subtitles.

                @Code(name: "Composition.swift", file: "composition-3.swift")
            }

            @Step {
                Next, let's create our player view by adding a `VideoPlayer` to the view hierarchy and use the `player` instance for playback.

                @Code(name: "Composition.swift", file: "composition-4.swift")
            }

            @Step {
                Let's make sure the playback will start as soon as the view appears on the screen.

                @Code(name: "Composition.swift", file: "composition-5.swift")
            }

            @Step {
                In order for the subtitles to be burned into the video on the fly, we need to attach the `renderer` to the `AVPlayerItem` and `AVURLAsset`. This will create a custom `AVVideoComposition` that can burn the subtitles over the video frames and set it to player item's `videoComposition` property.

                @Code(name: "Composition.swift", file: "composition-6.swift")
            }

            @Step {
                Next, we need to load our subtitles contents when view appears, either from disk or remote.

                @Code(name: "Composition.swift", file: "composition-7.swift")
            }

            @Step {
                After contents have been loaded, we need to provide the contents for the renderer by calling `loadTrack(contents:)`.

                @Code(name: "Composition.swift", file: "composition-8.swift")
            }

            @Step {
                Finally, let's run the app. And as expected, we can see the video playing and the subtitles being updated together with the video.

                @Image(source: "composition.gif", alt: "Green video rectangle with a text  at the bottom that says \"Wow!\"")
            }
        }
    }
}
